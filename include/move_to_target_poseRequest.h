// Generated by gencpp from file zhen_baxter_moveit/move_to_target_poseRequest.msg
// DO NOT EDIT!


#ifndef ZHEN_BAXTER_MOVEIT_MESSAGE_MOVE_TO_TARGET_POSEREQUEST_H
#define ZHEN_BAXTER_MOVEIT_MESSAGE_MOVE_TO_TARGET_POSEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace zhen_baxter_moveit
{
template <class ContainerAllocator>
struct move_to_target_poseRequest_
{
  typedef move_to_target_poseRequest_<ContainerAllocator> Type;

  move_to_target_poseRequest_()
    : target_poses()
    , reference_frames()  {
    }
  move_to_target_poseRequest_(const ContainerAllocator& _alloc)
    : target_poses(_alloc)
    , reference_frames(_alloc)  {
    }



   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _target_poses_type;
  _target_poses_type target_poses;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _reference_frames_type;
  _reference_frames_type reference_frames;




  typedef boost::shared_ptr< ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct move_to_target_poseRequest_

typedef ::zhen_baxter_moveit::move_to_target_poseRequest_<std::allocator<void> > move_to_target_poseRequest;

typedef boost::shared_ptr< ::zhen_baxter_moveit::move_to_target_poseRequest > move_to_target_poseRequestPtr;
typedef boost::shared_ptr< ::zhen_baxter_moveit::move_to_target_poseRequest const> move_to_target_poseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace zhen_baxter_moveit

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/indigo/share/shape_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'moveit_msgs': ['/opt/ros/indigo/share/moveit_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/indigo/share/object_recognition_msgs/cmake/../msg'], 'octomap_msgs': ['/opt/ros/indigo/share/octomap_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6d8a6441fd59d1ceafede05663ae166";
  }

  static const char* value(const ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6d8a6441fd59d1cULL;
  static const uint64_t static_value2 = 0xeafede05663ae166ULL;
};

template<class ContainerAllocator>
struct DataType< ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zhen_baxter_moveit/move_to_target_poseRequest";
  }

  static const char* value(const ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose[] target_poses\n\
string[] reference_frames\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_poses);
      stream.next(m.reference_frames);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct move_to_target_poseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zhen_baxter_moveit::move_to_target_poseRequest_<ContainerAllocator>& v)
  {
    s << indent << "target_poses[]" << std::endl;
    for (size_t i = 0; i < v.target_poses.size(); ++i)
    {
      s << indent << "  target_poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.target_poses[i]);
    }
    s << indent << "reference_frames[]" << std::endl;
    for (size_t i = 0; i < v.reference_frames.size(); ++i)
    {
      s << indent << "  reference_frames[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.reference_frames[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZHEN_BAXTER_MOVEIT_MESSAGE_MOVE_TO_TARGET_POSEREQUEST_H
